// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using bankApI.Data;

#nullable disable

namespace bankApI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250610113846_firstm")]
    partial class firstm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("bankApI.Models.ClientManagement.TransactionsRegistre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<int>("ClientAccountId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("EmployeeAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("EmployeeAccountId");

                    b.ToTable("TransactionsRegistres");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<bool>("IsFrozen")
                        .HasColumnType("boolean");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CVV")
                        .HasColumnType("integer");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.Client", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId");

                    b.HasIndex("TypeId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.ClientXNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<bool>("Isviewed")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("NotificationId");

                    b.ToTable("ClientXNotifications");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.EmployeeNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<bool>("Isviewed")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("NotificationId");

                    b.ToTable("EmployeeNotifications");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.GetHelp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientAccountId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(401)
                        .HasColumnType("character varying(401)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)");

                    b.HasKey("Id");

                    b.HasIndex("ClientAccountId");

                    b.ToTable("GetHelp");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.NotificationsTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationsTypes");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.TransactionsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TypeId");

                    b.ToTable("TransactionsHistory");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.TransactionsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("TransactionsTypes");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.TransferFundHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("RecieverAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderAccountId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecieverAccountId");

                    b.HasIndex("SenderAccountId");

                    b.ToTable("TransferFundHistory");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.Employee", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<double>("salary")
                        .HasColumnType("double precision");

                    b.HasKey("PersonId");

                    b.HasIndex("RoleTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.EmployeeAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFrozen")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("EmployeeAccount");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmployeeType");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.LoginRegistre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LoginRegistre");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.TransactionRegistre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("ReceiverClientId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderClientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverClientId");

                    b.HasIndex("SenderClientId");

                    b.ToTable("TransactionRegistre");
                });

            modelBuilder.Entity("bankApI.Models.ClientManagement.TransactionsRegistre", b =>
                {
                    b.HasOne("bankApI.Models.ClientModels.Account", "ClientAccount")
                        .WithMany("Deposits")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bankApI.Models.EmployeeModels.EmployeeAccount", "EmployeeAccount")
                        .WithMany("Deposits")
                        .HasForeignKey("EmployeeAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientAccount");

                    b.Navigation("EmployeeAccount");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.Account", b =>
                {
                    b.HasOne("bankApI.Models.ClientModels.Card", "Card")
                        .WithOne("Account")
                        .HasForeignKey("bankApI.Models.ClientModels.Account", "CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Person", "Person")
                        .WithMany("Accounts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Token", "token")
                        .WithOne("Account")
                        .HasForeignKey("bankApI.Models.ClientModels.Account", "TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Person");

                    b.Navigation("token");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.Client", b =>
                {
                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Person", "Person")
                        .WithOne("Client")
                        .HasForeignKey("bankApI.Models.ClientModels.Client", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Role", "Role")
                        .WithMany("Clients")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.ClientXNotifications", b =>
                {
                    b.HasOne("bankApI.Models.ClientModels.Account", "Account")
                        .WithMany("clientXNotifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Notification", "Notification")
                        .WithMany("clientXNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.EmployeeNotifications", b =>
                {
                    b.HasOne("bankApI.Models.EmployeeModels.EmployeeAccount", "Account")
                        .WithMany("EmployeeNotifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.GetHelp", b =>
                {
                    b.HasOne("bankApI.Models.ClientModels.Account", "Account")
                        .WithMany("GetHelp")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.Notification", b =>
                {
                    b.HasOne("bankApI.Models.ClientXEmployeeModels.NotificationsTypes", "types")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("types");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.TransactionsHistory", b =>
                {
                    b.HasOne("bankApI.Models.ClientModels.Account", "Account")
                        .WithMany("AccountTransactionHistory")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientXEmployeeModels.TransactionsType", "TransactionsType")
                        .WithMany("TransactionHistory")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("TransactionsType");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.TransferFundHistory", b =>
                {
                    b.HasOne("bankApI.Models.ClientModels.Account", "RecieverAccountIds")
                        .WithMany("RecieverAccount")
                        .HasForeignKey("RecieverAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientModels.Account", "SenderAccountIds")
                        .WithMany("SenderAccount")
                        .HasForeignKey("SenderAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecieverAccountIds");

                    b.Navigation("SenderAccountIds");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.Employee", b =>
                {
                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("bankApI.Models.EmployeeModels.Employee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bankApI.Models.EmployeeModels.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeType");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.EmployeeAccount", b =>
                {
                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Person", "Person")
                        .WithOne("EmployeeAccount")
                        .HasForeignKey("bankApI.Models.EmployeeModels.EmployeeAccount", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientXEmployeeModels.Token", "Token")
                        .WithOne("EmployeeAccount")
                        .HasForeignKey("bankApI.Models.EmployeeModels.EmployeeAccount", "TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.LoginRegistre", b =>
                {
                    b.HasOne("bankApI.Models.EmployeeModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.TransactionRegistre", b =>
                {
                    b.HasOne("bankApI.Models.ClientModels.Client", "ReceiverClient")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("ReceiverClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bankApI.Models.ClientModels.Client", "SenderClient")
                        .WithMany("SentTransactions")
                        .HasForeignKey("SenderClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverClient");

                    b.Navigation("SenderClient");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.Account", b =>
                {
                    b.Navigation("AccountTransactionHistory");

                    b.Navigation("Deposits");

                    b.Navigation("GetHelp");

                    b.Navigation("RecieverAccount");

                    b.Navigation("SenderAccount");

                    b.Navigation("clientXNotifications");
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.Card", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("bankApI.Models.ClientModels.Client", b =>
                {
                    b.Navigation("ReceivedTransactions");

                    b.Navigation("SentTransactions");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.Notification", b =>
                {
                    b.Navigation("clientXNotifications");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.NotificationsTypes", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.Person", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeAccount");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.Role", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.Token", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("EmployeeAccount");
                });

            modelBuilder.Entity("bankApI.Models.ClientXEmployeeModels.TransactionsType", b =>
                {
                    b.Navigation("TransactionHistory");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.EmployeeAccount", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("EmployeeNotifications");
                });

            modelBuilder.Entity("bankApI.Models.EmployeeModels.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
